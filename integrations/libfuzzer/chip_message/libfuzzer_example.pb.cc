// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libfuzzer_example.proto

#include "libfuzzer_example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace libfuzzer_example {
constexpr Msg::Msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : optional_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , any_(nullptr)
  , optional_uint64_(uint64_t{0u})
  , optional_float_(0){}
struct MsgDefaultTypeInternal {
  constexpr MsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgDefaultTypeInternal() {}
  union {
    Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace libfuzzer_example
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_libfuzzer_5fexample_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_libfuzzer_5fexample_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_libfuzzer_5fexample_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_libfuzzer_5fexample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, optional_float_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, optional_string_),
  PROTOBUF_FIELD_OFFSET(::libfuzzer_example::Msg, any_),
  3,
  2,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::libfuzzer_example::Msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libfuzzer_example::_Msg_default_instance_),
};

const char descriptor_table_protodef_libfuzzer_5fexample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027libfuzzer_example.proto\022\021libfuzzer_exa"
  "mple\032\031google/protobuf/any.proto\"r\n\003Msg\022\026"
  "\n\016optional_float\030\001 \001(\002\022\027\n\017optional_uint6"
  "4\030\002 \001(\004\022\027\n\017optional_string\030\003 \001(\t\022!\n\003any\030"
  "\004 \001(\0132\024.google.protobuf.Any"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_libfuzzer_5fexample_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_libfuzzer_5fexample_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_libfuzzer_5fexample_2eproto = {
  false, false, 187, descriptor_table_protodef_libfuzzer_5fexample_2eproto, "libfuzzer_example.proto", 
  &descriptor_table_libfuzzer_5fexample_2eproto_once, descriptor_table_libfuzzer_5fexample_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_libfuzzer_5fexample_2eproto::offsets,
  file_level_metadata_libfuzzer_5fexample_2eproto, file_level_enum_descriptors_libfuzzer_5fexample_2eproto, file_level_service_descriptors_libfuzzer_5fexample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_libfuzzer_5fexample_2eproto_getter() {
  return &descriptor_table_libfuzzer_5fexample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_libfuzzer_5fexample_2eproto(&descriptor_table_libfuzzer_5fexample_2eproto);
namespace libfuzzer_example {

// ===================================================================

class Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg>()._has_bits_);
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Any& any(const Msg* msg);
  static void set_has_any(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const PROTOBUF_NAMESPACE_ID::Any&
Msg::_Internal::any(const Msg* msg) {
  return *msg->any_;
}
void Msg::clear_any() {
  if (any_ != nullptr) any_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:libfuzzer_example.Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_optional_string(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_any()) {
    any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.any_);
  } else {
    any_ = nullptr;
  }
  ::memcpy(&optional_uint64_, &from.optional_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_float_) -
    reinterpret_cast<char*>(&optional_uint64_)) + sizeof(optional_float_));
  // @@protoc_insertion_point(copy_constructor:libfuzzer_example.Msg)
}

inline void Msg::SharedCtor() {
optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&any_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optional_float_) -
    reinterpret_cast<char*>(&any_)) + sizeof(optional_float_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:libfuzzer_example.Msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete any_;
}

void Msg::ArenaDtor(void* object) {
  Msg* _this = reinterpret_cast< Msg* >(object);
  (void)_this;
}
void Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:libfuzzer_example.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(any_ != nullptr);
      any_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&optional_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_float_) -
        reinterpret_cast<char*>(&optional_uint64_)) + sizeof(optional_float_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float optional_float = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_optional_float(&has_bits);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optional_uint64(&has_bits);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string optional_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "libfuzzer_example.Msg.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Any any = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:libfuzzer_example.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float optional_float = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_optional_float(), target);
  }

  // optional uint64 optional_uint64 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_optional_uint64(), target);
  }

  // optional string optional_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "libfuzzer_example.Msg.optional_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_optional_string(), target);
  }

  // optional .google.protobuf.Any any = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::any(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libfuzzer_example.Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libfuzzer_example.Msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string optional_string = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional .google.protobuf.Any any = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *any_);
    }

    // optional uint64 optional_uint64 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_optional_uint64());
    }

    // optional float optional_float = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg::GetClassData() const { return &_class_data_; }

void Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg *>(to)->MergeFrom(
      static_cast<const Msg &>(from));
}


void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libfuzzer_example.Msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any());
    }
    if (cached_has_bits & 0x00000004u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x00000008u) {
      optional_float_ = from.optional_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libfuzzer_example.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &optional_string_, GetArenaForAllocation(),
      &other->optional_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, optional_float_)
      + sizeof(Msg::optional_float_)
      - PROTOBUF_FIELD_OFFSET(Msg, any_)>(
          reinterpret_cast<char*>(&any_),
          reinterpret_cast<char*>(&other->any_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_libfuzzer_5fexample_2eproto_getter, &descriptor_table_libfuzzer_5fexample_2eproto_once,
      file_level_metadata_libfuzzer_5fexample_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace libfuzzer_example
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::libfuzzer_example::Msg* Arena::CreateMaybeMessage< ::libfuzzer_example::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::libfuzzer_example::Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
