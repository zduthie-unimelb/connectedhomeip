// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chip_message.proto

#include "chip_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace chip_message {
constexpr ChipMessage_Payload::ChipMessage_Payload(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secured_extensions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flag_i_(false)
  , flag_a_(false)
  , flag_r_(false)
  , flag_sx_(false)
  , flag_v_(false)
  , acknowledged_message_counter_(0u)
  , protocol_opcode_(0u)
  , exchange_id_(0u)
  , protocol_id_(0)

  , vendor_id_(0u){}
struct ChipMessage_PayloadDefaultTypeInternal {
  constexpr ChipMessage_PayloadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChipMessage_PayloadDefaultTypeInternal() {}
  union {
    ChipMessage_Payload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChipMessage_PayloadDefaultTypeInternal _ChipMessage_Payload_default_instance_;
constexpr ChipMessage::ChipMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_extensions_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , footer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(nullptr)
  , flag_s_(0)
  , flag_dsiz_(0)

  , message_counter_(0)
  , flag_version_(false)
  , security_flag_p_(false)
  , security_flag_c_(false)
  , security_flag_mx_(false)
  , security_flag_session_type_(false)
  , source_node_id_(int64_t{0})
  , destination_node_id_(int64_t{0})
  , session_id_(1){}
struct ChipMessageDefaultTypeInternal {
  constexpr ChipMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChipMessageDefaultTypeInternal() {}
  union {
    ChipMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChipMessageDefaultTypeInternal _ChipMessage_default_instance_;
}  // namespace chip_message
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chip_5fmessage_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chip_5fmessage_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chip_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chip_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, flag_i_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, flag_a_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, flag_r_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, flag_sx_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, flag_v_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, protocol_opcode_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, protocol_id_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, vendor_id_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, acknowledged_message_counter_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, secured_extensions_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage_Payload, application_payload_),
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  11,
  7,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, flag_version_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, flag_s_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, flag_dsiz_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, session_id_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, security_flag_p_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, security_flag_c_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, security_flag_mx_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, security_flag_session_type_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, message_counter_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, source_node_id_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, destination_node_id_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, message_extensions_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, payload_),
  PROTOBUF_FIELD_OFFSET(::chip_message::ChipMessage, footer_),
  6,
  3,
  4,
  13,
  7,
  8,
  9,
  10,
  5,
  11,
  12,
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::chip_message::ChipMessage_Payload)},
  { 29, 48, sizeof(::chip_message::ChipMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chip_message::_ChipMessage_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::chip_message::_ChipMessage_default_instance_),
};

const char descriptor_table_protodef_chip_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022chip_message.proto\022\014chip_message\"\356\007\n\013C"
  "hipMessage\022\024\n\014flag_version\030\001 \002(\010\022\016\n\006flag"
  "_s\030\002 \002(\005\0221\n\tflag_dsiz\030\003 \002(\0162\036.chip_messa"
  "ge.ChipMessage.DSIZ\022\025\n\nsession_id\030\n \002(\005:"
  "\0011\022\027\n\017security_flag_p\030\024 \002(\010\022\027\n\017security_"
  "flag_c\030\025 \002(\010\022\030\n\020security_flag_mx\030\026 \002(\010\022\""
  "\n\032security_flag_session_type\030\027 \002(\010\022\027\n\017me"
  "ssage_counter\030\036 \002(\005\022\026\n\016source_node_id\030( "
  "\001(\003\022\033\n\023destination_node_id\0302 \001(\003\022\032\n\022mess"
  "age_extensions\030< \001(\014\0222\n\007payload\030F \002(\0132!."
  "chip_message.ChipMessage.Payload\022\016\n\006foot"
  "er\030P \002(\014\032\210\004\n\007Payload\022\016\n\006flag_i\030\001 \002(\010\022\016\n\006"
  "flag_a\030\002 \002(\010\022\016\n\006flag_r\030\003 \002(\010\022\017\n\007flag_sx\030"
  "\004 \002(\010\022\016\n\006flag_v\030\005 \002(\010\022\027\n\017protocol_opcode"
  "\030\n \002(\r\022\023\n\013exchange_id\030\024 \002(\r\022A\n\013protocol_"
  "id\030\036 \002(\0162,.chip_message.ChipMessage.Payl"
  "oad.ProtocolID\022\021\n\tvendor_id\030( \001(\r\022$\n\034ack"
  "nowledged_message_counter\0302 \001(\r\022\032\n\022secur"
  "ed_extensions\030< \001(\014\022\033\n\023application_paylo"
  "ad\030F \002(\014\"\310\001\n\nProtocolID\022\036\n\032PROTOCOL_ID_S"
  "ECURE_CHANNEL\020\000\022!\n\035PROTOCOL_ID_INTERACTI"
  "ON_MODEL\020\001\022\023\n\017PROTOCOL_ID_BDX\020\002\022+\n\'PROTO"
  "COL_ID_USER_DIRECTED_COMMISSIONING\020\003\022\033\n\027"
  "PROTOCOL_ID_FOR_TESTING\020\004\022\030\n\024PROTOCOL_ID"
  "_RESERVED\020\005\"F\n\004DSIZ\022\024\n\020DSIZ_NOT_PRESENT\020"
  "\000\022\023\n\017DSIZ_PRESENT_64\020\001\022\023\n\017DSIZ_PRESENT_1"
  "6\020\002"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chip_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chip_5fmessage_2eproto = {
  false, false, 1043, descriptor_table_protodef_chip_5fmessage_2eproto, "chip_message.proto", 
  &descriptor_table_chip_5fmessage_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_chip_5fmessage_2eproto::offsets,
  file_level_metadata_chip_5fmessage_2eproto, file_level_enum_descriptors_chip_5fmessage_2eproto, file_level_service_descriptors_chip_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_chip_5fmessage_2eproto_getter() {
  return &descriptor_table_chip_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_chip_5fmessage_2eproto(&descriptor_table_chip_5fmessage_2eproto);
namespace chip_message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChipMessage_Payload_ProtocolID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chip_5fmessage_2eproto);
  return file_level_enum_descriptors_chip_5fmessage_2eproto[0];
}
bool ChipMessage_Payload_ProtocolID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::PROTOCOL_ID_SECURE_CHANNEL;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::PROTOCOL_ID_INTERACTION_MODEL;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::PROTOCOL_ID_BDX;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::PROTOCOL_ID_USER_DIRECTED_COMMISSIONING;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::PROTOCOL_ID_FOR_TESTING;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::PROTOCOL_ID_RESERVED;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::ProtocolID_MIN;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload::ProtocolID_MAX;
constexpr int ChipMessage_Payload::ProtocolID_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChipMessage_DSIZ_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chip_5fmessage_2eproto);
  return file_level_enum_descriptors_chip_5fmessage_2eproto[1];
}
bool ChipMessage_DSIZ_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChipMessage_DSIZ ChipMessage::DSIZ_NOT_PRESENT;
constexpr ChipMessage_DSIZ ChipMessage::DSIZ_PRESENT_64;
constexpr ChipMessage_DSIZ ChipMessage::DSIZ_PRESENT_16;
constexpr ChipMessage_DSIZ ChipMessage::DSIZ_MIN;
constexpr ChipMessage_DSIZ ChipMessage::DSIZ_MAX;
constexpr int ChipMessage::DSIZ_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ChipMessage_Payload::_Internal {
 public:
  using HasBits = decltype(std::declval<ChipMessage_Payload>()._has_bits_);
  static void set_has_flag_i(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_flag_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flag_r(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flag_sx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_flag_v(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_protocol_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_exchange_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_protocol_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_acknowledged_message_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_secured_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_application_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000077e) ^ 0x0000077e) != 0;
  }
};

ChipMessage_Payload::ChipMessage_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:chip_message.ChipMessage.Payload)
}
ChipMessage_Payload::ChipMessage_Payload(const ChipMessage_Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secured_extensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_secured_extensions()) {
    secured_extensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secured_extensions(), 
      GetArenaForAllocation());
  }
  application_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_application_payload()) {
    application_payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_payload(), 
      GetArenaForAllocation());
  }
  ::memcpy(&flag_i_, &from.flag_i_,
    static_cast<size_t>(reinterpret_cast<char*>(&vendor_id_) -
    reinterpret_cast<char*>(&flag_i_)) + sizeof(vendor_id_));
  // @@protoc_insertion_point(copy_constructor:chip_message.ChipMessage.Payload)
}

inline void ChipMessage_Payload::SharedCtor() {
secured_extensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flag_i_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vendor_id_) -
    reinterpret_cast<char*>(&flag_i_)) + sizeof(vendor_id_));
}

ChipMessage_Payload::~ChipMessage_Payload() {
  // @@protoc_insertion_point(destructor:chip_message.ChipMessage.Payload)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChipMessage_Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secured_extensions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChipMessage_Payload::ArenaDtor(void* object) {
  ChipMessage_Payload* _this = reinterpret_cast< ChipMessage_Payload* >(object);
  (void)_this;
}
void ChipMessage_Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChipMessage_Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChipMessage_Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:chip_message.ChipMessage.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      secured_extensions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      application_payload_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&flag_i_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acknowledged_message_counter_) -
        reinterpret_cast<char*>(&flag_i_)) + sizeof(acknowledged_message_counter_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&protocol_opcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vendor_id_) -
        reinterpret_cast<char*>(&protocol_opcode_)) + sizeof(vendor_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChipMessage_Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool flag_i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag_i(&has_bits);
          flag_i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool flag_a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flag_a(&has_bits);
          flag_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool flag_r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flag_r(&has_bits);
          flag_r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool flag_sx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_flag_sx(&has_bits);
          flag_sx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool flag_v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flag_v(&has_bits);
          flag_v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 protocol_opcode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_protocol_opcode(&has_bits);
          protocol_opcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 exchange_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_exchange_id(&has_bits);
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .chip_message.ChipMessage.Payload.ProtocolID protocol_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chip_message::ChipMessage_Payload_ProtocolID_IsValid(val))) {
            _internal_set_protocol_id(static_cast<::chip_message::ChipMessage_Payload_ProtocolID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(30, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 vendor_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_vendor_id(&has_bits);
          vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 acknowledged_message_counter = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_acknowledged_message_counter(&has_bits);
          acknowledged_message_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes secured_extensions = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_secured_extensions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes application_payload = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_application_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChipMessage_Payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chip_message.ChipMessage.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool flag_i = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag_i(), target);
  }

  // required bool flag_a = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_flag_a(), target);
  }

  // required bool flag_r = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_flag_r(), target);
  }

  // required bool flag_sx = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_flag_sx(), target);
  }

  // required bool flag_v = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_flag_v(), target);
  }

  // required uint32 protocol_opcode = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_protocol_opcode(), target);
  }

  // required uint32 exchange_id = 20;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_exchange_id(), target);
  }

  // required .chip_message.ChipMessage.Payload.ProtocolID protocol_id = 30;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_protocol_id(), target);
  }

  // optional uint32 vendor_id = 40;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_vendor_id(), target);
  }

  // optional uint32 acknowledged_message_counter = 50;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(50, this->_internal_acknowledged_message_counter(), target);
  }

  // optional bytes secured_extensions = 60;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_secured_extensions(), target);
  }

  // required bytes application_payload = 70;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        70, this->_internal_application_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chip_message.ChipMessage.Payload)
  return target;
}

size_t ChipMessage_Payload::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chip_message.ChipMessage.Payload)
  size_t total_size = 0;

  if (_internal_has_application_payload()) {
    // required bytes application_payload = 70;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_application_payload());
  }

  if (_internal_has_flag_i()) {
    // required bool flag_i = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_flag_a()) {
    // required bool flag_a = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_flag_r()) {
    // required bool flag_r = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_flag_sx()) {
    // required bool flag_sx = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_flag_v()) {
    // required bool flag_v = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_protocol_opcode()) {
    // required uint32 protocol_opcode = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protocol_opcode());
  }

  if (_internal_has_exchange_id()) {
    // required uint32 exchange_id = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exchange_id());
  }

  if (_internal_has_protocol_id()) {
    // required .chip_message.ChipMessage.Payload.ProtocolID protocol_id = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol_id());
  }

  return total_size;
}
size_t ChipMessage_Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chip_message.ChipMessage.Payload)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000077e) ^ 0x0000077e) == 0) {  // All required fields are present.
    // required bytes application_payload = 70;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_application_payload());

    // required bool flag_i = 1;
    total_size += 1 + 1;

    // required bool flag_a = 2;
    total_size += 1 + 1;

    // required bool flag_r = 3;
    total_size += 1 + 1;

    // required bool flag_sx = 4;
    total_size += 1 + 1;

    // required bool flag_v = 5;
    total_size += 1 + 1;

    // required uint32 protocol_opcode = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protocol_opcode());

    // required uint32 exchange_id = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_exchange_id());

    // required .chip_message.ChipMessage.Payload.ProtocolID protocol_id = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes secured_extensions = 60;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_secured_extensions());
  }

  // optional uint32 acknowledged_message_counter = 50;
  if (cached_has_bits & 0x00000080u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_acknowledged_message_counter());
  }

  // optional uint32 vendor_id = 40;
  if (cached_has_bits & 0x00000800u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vendor_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChipMessage_Payload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChipMessage_Payload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChipMessage_Payload::GetClassData() const { return &_class_data_; }

void ChipMessage_Payload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChipMessage_Payload *>(to)->MergeFrom(
      static_cast<const ChipMessage_Payload &>(from));
}


void ChipMessage_Payload::MergeFrom(const ChipMessage_Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chip_message.ChipMessage.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_secured_extensions(from._internal_secured_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_application_payload(from._internal_application_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      flag_i_ = from.flag_i_;
    }
    if (cached_has_bits & 0x00000008u) {
      flag_a_ = from.flag_a_;
    }
    if (cached_has_bits & 0x00000010u) {
      flag_r_ = from.flag_r_;
    }
    if (cached_has_bits & 0x00000020u) {
      flag_sx_ = from.flag_sx_;
    }
    if (cached_has_bits & 0x00000040u) {
      flag_v_ = from.flag_v_;
    }
    if (cached_has_bits & 0x00000080u) {
      acknowledged_message_counter_ = from.acknowledged_message_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      protocol_opcode_ = from.protocol_opcode_;
    }
    if (cached_has_bits & 0x00000200u) {
      exchange_id_ = from.exchange_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      protocol_id_ = from.protocol_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      vendor_id_ = from.vendor_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChipMessage_Payload::CopyFrom(const ChipMessage_Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chip_message.ChipMessage.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChipMessage_Payload::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ChipMessage_Payload::InternalSwap(ChipMessage_Payload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secured_extensions_, GetArenaForAllocation(),
      &other->secured_extensions_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_payload_, GetArenaForAllocation(),
      &other->application_payload_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChipMessage_Payload, vendor_id_)
      + sizeof(ChipMessage_Payload::vendor_id_)
      - PROTOBUF_FIELD_OFFSET(ChipMessage_Payload, flag_i_)>(
          reinterpret_cast<char*>(&flag_i_),
          reinterpret_cast<char*>(&other->flag_i_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChipMessage_Payload::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chip_5fmessage_2eproto_getter, &descriptor_table_chip_5fmessage_2eproto_once,
      file_level_metadata_chip_5fmessage_2eproto[0]);
}

// ===================================================================

class ChipMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChipMessage>()._has_bits_);
  static void set_has_flag_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_flag_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flag_dsiz(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_security_flag_p(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_security_flag_c(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_security_flag_mx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_security_flag_session_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_message_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_source_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_destination_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_message_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::chip_message::ChipMessage_Payload& payload(const ChipMessage* msg);
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_footer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000027fe) ^ 0x000027fe) != 0;
  }
};

const ::chip_message::ChipMessage_Payload&
ChipMessage::_Internal::payload(const ChipMessage* msg) {
  return *msg->payload_;
}
ChipMessage::ChipMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:chip_message.ChipMessage)
}
ChipMessage::ChipMessage(const ChipMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_extensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_extensions()) {
    message_extensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_extensions(), 
      GetArenaForAllocation());
  }
  footer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_footer()) {
    footer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_footer(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_payload()) {
    payload_ = new ::chip_message::ChipMessage_Payload(*from.payload_);
  } else {
    payload_ = nullptr;
  }
  ::memcpy(&flag_s_, &from.flag_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&flag_s_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:chip_message.ChipMessage)
}

inline void ChipMessage::SharedCtor() {
message_extensions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
footer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&payload_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&destination_node_id_) -
    reinterpret_cast<char*>(&payload_)) + sizeof(destination_node_id_));
session_id_ = 1;
}

ChipMessage::~ChipMessage() {
  // @@protoc_insertion_point(destructor:chip_message.ChipMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChipMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_extensions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  footer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payload_;
}

void ChipMessage::ArenaDtor(void* object) {
  ChipMessage* _this = reinterpret_cast< ChipMessage* >(object);
  (void)_this;
}
void ChipMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChipMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChipMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chip_message.ChipMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      message_extensions_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      footer_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(payload_ != nullptr);
      payload_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&flag_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&security_flag_p_) -
        reinterpret_cast<char*>(&flag_s_)) + sizeof(security_flag_p_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&security_flag_c_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_node_id_) -
        reinterpret_cast<char*>(&security_flag_c_)) + sizeof(destination_node_id_));
    session_id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChipMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool flag_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag_version(&has_bits);
          flag_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 flag_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flag_s(&has_bits);
          flag_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .chip_message.ChipMessage.DSIZ flag_dsiz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chip_message::ChipMessage_DSIZ_IsValid(val))) {
            _internal_set_flag_dsiz(static_cast<::chip_message::ChipMessage_DSIZ>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 session_id = 10 [default = 1];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_session_id(&has_bits);
          session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool security_flag_p = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_security_flag_p(&has_bits);
          security_flag_p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool security_flag_c = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_security_flag_c(&has_bits);
          security_flag_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool security_flag_mx = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_security_flag_mx(&has_bits);
          security_flag_mx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool security_flag_session_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_security_flag_session_type(&has_bits);
          security_flag_session_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 message_counter = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_message_counter(&has_bits);
          message_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 source_node_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_source_node_id(&has_bits);
          source_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 destination_node_id = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_destination_node_id(&has_bits);
          destination_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes message_extensions = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_message_extensions();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .chip_message.ChipMessage.Payload payload = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes footer = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_footer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChipMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chip_message.ChipMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool flag_version = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_flag_version(), target);
  }

  // required int32 flag_s = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_flag_s(), target);
  }

  // required .chip_message.ChipMessage.DSIZ flag_dsiz = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_flag_dsiz(), target);
  }

  // required int32 session_id = 10 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_session_id(), target);
  }

  // required bool security_flag_p = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_security_flag_p(), target);
  }

  // required bool security_flag_c = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_security_flag_c(), target);
  }

  // required bool security_flag_mx = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_security_flag_mx(), target);
  }

  // required bool security_flag_session_type = 23;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_security_flag_session_type(), target);
  }

  // required int32 message_counter = 30;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_message_counter(), target);
  }

  // optional int64 source_node_id = 40;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(40, this->_internal_source_node_id(), target);
  }

  // optional int64 destination_node_id = 50;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(50, this->_internal_destination_node_id(), target);
  }

  // optional bytes message_extensions = 60;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        60, this->_internal_message_extensions(), target);
  }

  // required .chip_message.ChipMessage.Payload payload = 70;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        70, _Internal::payload(this), target, stream);
  }

  // required bytes footer = 80;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        80, this->_internal_footer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chip_message.ChipMessage)
  return target;
}

size_t ChipMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chip_message.ChipMessage)
  size_t total_size = 0;

  if (_internal_has_footer()) {
    // required bytes footer = 80;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_footer());
  }

  if (_internal_has_payload()) {
    // required .chip_message.ChipMessage.Payload payload = 70;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);
  }

  if (_internal_has_flag_s()) {
    // required int32 flag_s = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag_s());
  }

  if (_internal_has_flag_dsiz()) {
    // required .chip_message.ChipMessage.DSIZ flag_dsiz = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag_dsiz());
  }

  if (_internal_has_message_counter()) {
    // required int32 message_counter = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_counter());
  }

  if (_internal_has_flag_version()) {
    // required bool flag_version = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_security_flag_p()) {
    // required bool security_flag_p = 20;
    total_size += 2 + 1;
  }

  if (_internal_has_security_flag_c()) {
    // required bool security_flag_c = 21;
    total_size += 2 + 1;
  }

  if (_internal_has_security_flag_mx()) {
    // required bool security_flag_mx = 22;
    total_size += 2 + 1;
  }

  if (_internal_has_security_flag_session_type()) {
    // required bool security_flag_session_type = 23;
    total_size += 2 + 1;
  }

  if (_internal_has_session_id()) {
    // required int32 session_id = 10 [default = 1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());
  }

  return total_size;
}
size_t ChipMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chip_message.ChipMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000027fe) ^ 0x000027fe) == 0) {  // All required fields are present.
    // required bytes footer = 80;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_footer());

    // required .chip_message.ChipMessage.Payload payload = 70;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_);

    // required int32 flag_s = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag_s());

    // required .chip_message.ChipMessage.DSIZ flag_dsiz = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flag_dsiz());

    // required int32 message_counter = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_message_counter());

    // required bool flag_version = 1;
    total_size += 1 + 1;

    // required bool security_flag_p = 20;
    total_size += 2 + 1;

    // required bool security_flag_c = 21;
    total_size += 2 + 1;

    // required bool security_flag_mx = 22;
    total_size += 2 + 1;

    // required bool security_flag_session_type = 23;
    total_size += 2 + 1;

    // required int32 session_id = 10 [default = 1];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_session_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes message_extensions = 60;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message_extensions());
  }

  if (cached_has_bits & 0x00001800u) {
    // optional int64 source_node_id = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_source_node_id());
    }

    // optional int64 destination_node_id = 50;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_destination_node_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChipMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChipMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChipMessage::GetClassData() const { return &_class_data_; }

void ChipMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChipMessage *>(to)->MergeFrom(
      static_cast<const ChipMessage &>(from));
}


void ChipMessage::MergeFrom(const ChipMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chip_message.ChipMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message_extensions(from._internal_message_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_footer(from._internal_footer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_payload()->::chip_message::ChipMessage_Payload::MergeFrom(from._internal_payload());
    }
    if (cached_has_bits & 0x00000008u) {
      flag_s_ = from.flag_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      flag_dsiz_ = from.flag_dsiz_;
    }
    if (cached_has_bits & 0x00000020u) {
      message_counter_ = from.message_counter_;
    }
    if (cached_has_bits & 0x00000040u) {
      flag_version_ = from.flag_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      security_flag_p_ = from.security_flag_p_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      security_flag_c_ = from.security_flag_c_;
    }
    if (cached_has_bits & 0x00000200u) {
      security_flag_mx_ = from.security_flag_mx_;
    }
    if (cached_has_bits & 0x00000400u) {
      security_flag_session_type_ = from.security_flag_session_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      source_node_id_ = from.source_node_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      destination_node_id_ = from.destination_node_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChipMessage::CopyFrom(const ChipMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chip_message.ChipMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChipMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_payload()) {
    if (!payload_->IsInitialized()) return false;
  }
  return true;
}

void ChipMessage::InternalSwap(ChipMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_extensions_, GetArenaForAllocation(),
      &other->message_extensions_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &footer_, GetArenaForAllocation(),
      &other->footer_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChipMessage, destination_node_id_)
      + sizeof(ChipMessage::destination_node_id_)
      - PROTOBUF_FIELD_OFFSET(ChipMessage, payload_)>(
          reinterpret_cast<char*>(&payload_),
          reinterpret_cast<char*>(&other->payload_));
  swap(session_id_, other->session_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChipMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_chip_5fmessage_2eproto_getter, &descriptor_table_chip_5fmessage_2eproto_once,
      file_level_metadata_chip_5fmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chip_message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chip_message::ChipMessage_Payload* Arena::CreateMaybeMessage< ::chip_message::ChipMessage_Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chip_message::ChipMessage_Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::chip_message::ChipMessage* Arena::CreateMaybeMessage< ::chip_message::ChipMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chip_message::ChipMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
