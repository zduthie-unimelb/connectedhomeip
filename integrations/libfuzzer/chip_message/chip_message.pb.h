// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chip_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chip_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chip_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chip_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chip_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chip_5fmessage_2eproto;
namespace chip_message {
class ChipMessage;
struct ChipMessageDefaultTypeInternal;
extern ChipMessageDefaultTypeInternal _ChipMessage_default_instance_;
class ChipMessage_Payload;
struct ChipMessage_PayloadDefaultTypeInternal;
extern ChipMessage_PayloadDefaultTypeInternal _ChipMessage_Payload_default_instance_;
}  // namespace chip_message
PROTOBUF_NAMESPACE_OPEN
template<> ::chip_message::ChipMessage* Arena::CreateMaybeMessage<::chip_message::ChipMessage>(Arena*);
template<> ::chip_message::ChipMessage_Payload* Arena::CreateMaybeMessage<::chip_message::ChipMessage_Payload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chip_message {

enum ChipMessage_Payload_ProtocolID : int {
  ChipMessage_Payload_ProtocolID_PROTOCOL_ID_SECURE_CHANNEL = 0,
  ChipMessage_Payload_ProtocolID_PROTOCOL_ID_INTERACTION_MODEL = 1,
  ChipMessage_Payload_ProtocolID_PROTOCOL_ID_BDX = 2,
  ChipMessage_Payload_ProtocolID_PROTOCOL_ID_USER_DIRECTED_COMMISSIONING = 3,
  ChipMessage_Payload_ProtocolID_PROTOCOL_ID_FOR_TESTING = 4,
  ChipMessage_Payload_ProtocolID_PROTOCOL_ID_RESERVED = 5
};
bool ChipMessage_Payload_ProtocolID_IsValid(int value);
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload_ProtocolID_ProtocolID_MIN = ChipMessage_Payload_ProtocolID_PROTOCOL_ID_SECURE_CHANNEL;
constexpr ChipMessage_Payload_ProtocolID ChipMessage_Payload_ProtocolID_ProtocolID_MAX = ChipMessage_Payload_ProtocolID_PROTOCOL_ID_RESERVED;
constexpr int ChipMessage_Payload_ProtocolID_ProtocolID_ARRAYSIZE = ChipMessage_Payload_ProtocolID_ProtocolID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChipMessage_Payload_ProtocolID_descriptor();
template<typename T>
inline const std::string& ChipMessage_Payload_ProtocolID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChipMessage_Payload_ProtocolID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChipMessage_Payload_ProtocolID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChipMessage_Payload_ProtocolID_descriptor(), enum_t_value);
}
inline bool ChipMessage_Payload_ProtocolID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChipMessage_Payload_ProtocolID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChipMessage_Payload_ProtocolID>(
    ChipMessage_Payload_ProtocolID_descriptor(), name, value);
}
enum ChipMessage_DSIZ : int {
  ChipMessage_DSIZ_DSIZ_NOT_PRESENT = 0,
  ChipMessage_DSIZ_DSIZ_PRESENT_64 = 1,
  ChipMessage_DSIZ_DSIZ_PRESENT_16 = 2
};
bool ChipMessage_DSIZ_IsValid(int value);
constexpr ChipMessage_DSIZ ChipMessage_DSIZ_DSIZ_MIN = ChipMessage_DSIZ_DSIZ_NOT_PRESENT;
constexpr ChipMessage_DSIZ ChipMessage_DSIZ_DSIZ_MAX = ChipMessage_DSIZ_DSIZ_PRESENT_16;
constexpr int ChipMessage_DSIZ_DSIZ_ARRAYSIZE = ChipMessage_DSIZ_DSIZ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChipMessage_DSIZ_descriptor();
template<typename T>
inline const std::string& ChipMessage_DSIZ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChipMessage_DSIZ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChipMessage_DSIZ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChipMessage_DSIZ_descriptor(), enum_t_value);
}
inline bool ChipMessage_DSIZ_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChipMessage_DSIZ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChipMessage_DSIZ>(
    ChipMessage_DSIZ_descriptor(), name, value);
}
// ===================================================================

class ChipMessage_Payload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chip_message.ChipMessage.Payload) */ {
 public:
  inline ChipMessage_Payload() : ChipMessage_Payload(nullptr) {}
  ~ChipMessage_Payload() override;
  explicit constexpr ChipMessage_Payload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChipMessage_Payload(const ChipMessage_Payload& from);
  ChipMessage_Payload(ChipMessage_Payload&& from) noexcept
    : ChipMessage_Payload() {
    *this = ::std::move(from);
  }

  inline ChipMessage_Payload& operator=(const ChipMessage_Payload& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChipMessage_Payload& operator=(ChipMessage_Payload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChipMessage_Payload& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChipMessage_Payload* internal_default_instance() {
    return reinterpret_cast<const ChipMessage_Payload*>(
               &_ChipMessage_Payload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChipMessage_Payload& a, ChipMessage_Payload& b) {
    a.Swap(&b);
  }
  inline void Swap(ChipMessage_Payload* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChipMessage_Payload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChipMessage_Payload* New() const final {
    return new ChipMessage_Payload();
  }

  ChipMessage_Payload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChipMessage_Payload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChipMessage_Payload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChipMessage_Payload& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChipMessage_Payload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chip_message.ChipMessage.Payload";
  }
  protected:
  explicit ChipMessage_Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChipMessage_Payload_ProtocolID ProtocolID;
  static constexpr ProtocolID PROTOCOL_ID_SECURE_CHANNEL =
    ChipMessage_Payload_ProtocolID_PROTOCOL_ID_SECURE_CHANNEL;
  static constexpr ProtocolID PROTOCOL_ID_INTERACTION_MODEL =
    ChipMessage_Payload_ProtocolID_PROTOCOL_ID_INTERACTION_MODEL;
  static constexpr ProtocolID PROTOCOL_ID_BDX =
    ChipMessage_Payload_ProtocolID_PROTOCOL_ID_BDX;
  static constexpr ProtocolID PROTOCOL_ID_USER_DIRECTED_COMMISSIONING =
    ChipMessage_Payload_ProtocolID_PROTOCOL_ID_USER_DIRECTED_COMMISSIONING;
  static constexpr ProtocolID PROTOCOL_ID_FOR_TESTING =
    ChipMessage_Payload_ProtocolID_PROTOCOL_ID_FOR_TESTING;
  static constexpr ProtocolID PROTOCOL_ID_RESERVED =
    ChipMessage_Payload_ProtocolID_PROTOCOL_ID_RESERVED;
  static inline bool ProtocolID_IsValid(int value) {
    return ChipMessage_Payload_ProtocolID_IsValid(value);
  }
  static constexpr ProtocolID ProtocolID_MIN =
    ChipMessage_Payload_ProtocolID_ProtocolID_MIN;
  static constexpr ProtocolID ProtocolID_MAX =
    ChipMessage_Payload_ProtocolID_ProtocolID_MAX;
  static constexpr int ProtocolID_ARRAYSIZE =
    ChipMessage_Payload_ProtocolID_ProtocolID_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProtocolID_descriptor() {
    return ChipMessage_Payload_ProtocolID_descriptor();
  }
  template<typename T>
  static inline const std::string& ProtocolID_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProtocolID>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProtocolID_Name.");
    return ChipMessage_Payload_ProtocolID_Name(enum_t_value);
  }
  static inline bool ProtocolID_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProtocolID* value) {
    return ChipMessage_Payload_ProtocolID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSecuredExtensionsFieldNumber = 60,
    kApplicationPayloadFieldNumber = 70,
    kFlagIFieldNumber = 1,
    kFlagAFieldNumber = 2,
    kFlagRFieldNumber = 3,
    kFlagSxFieldNumber = 4,
    kFlagVFieldNumber = 5,
    kAcknowledgedMessageCounterFieldNumber = 50,
    kProtocolOpcodeFieldNumber = 10,
    kExchangeIdFieldNumber = 20,
    kProtocolIdFieldNumber = 30,
    kVendorIdFieldNumber = 40,
  };
  // optional bytes secured_extensions = 60;
  bool has_secured_extensions() const;
  private:
  bool _internal_has_secured_extensions() const;
  public:
  void clear_secured_extensions();
  const std::string& secured_extensions() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secured_extensions(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secured_extensions();
  PROTOBUF_MUST_USE_RESULT std::string* release_secured_extensions();
  void set_allocated_secured_extensions(std::string* secured_extensions);
  private:
  const std::string& _internal_secured_extensions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secured_extensions(const std::string& value);
  std::string* _internal_mutable_secured_extensions();
  public:

  // required bytes application_payload = 70;
  bool has_application_payload() const;
  private:
  bool _internal_has_application_payload() const;
  public:
  void clear_application_payload();
  const std::string& application_payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_payload();
  void set_allocated_application_payload(std::string* application_payload);
  private:
  const std::string& _internal_application_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_payload(const std::string& value);
  std::string* _internal_mutable_application_payload();
  public:

  // required bool flag_i = 1;
  bool has_flag_i() const;
  private:
  bool _internal_has_flag_i() const;
  public:
  void clear_flag_i();
  bool flag_i() const;
  void set_flag_i(bool value);
  private:
  bool _internal_flag_i() const;
  void _internal_set_flag_i(bool value);
  public:

  // required bool flag_a = 2;
  bool has_flag_a() const;
  private:
  bool _internal_has_flag_a() const;
  public:
  void clear_flag_a();
  bool flag_a() const;
  void set_flag_a(bool value);
  private:
  bool _internal_flag_a() const;
  void _internal_set_flag_a(bool value);
  public:

  // required bool flag_r = 3;
  bool has_flag_r() const;
  private:
  bool _internal_has_flag_r() const;
  public:
  void clear_flag_r();
  bool flag_r() const;
  void set_flag_r(bool value);
  private:
  bool _internal_flag_r() const;
  void _internal_set_flag_r(bool value);
  public:

  // required bool flag_sx = 4;
  bool has_flag_sx() const;
  private:
  bool _internal_has_flag_sx() const;
  public:
  void clear_flag_sx();
  bool flag_sx() const;
  void set_flag_sx(bool value);
  private:
  bool _internal_flag_sx() const;
  void _internal_set_flag_sx(bool value);
  public:

  // required bool flag_v = 5;
  bool has_flag_v() const;
  private:
  bool _internal_has_flag_v() const;
  public:
  void clear_flag_v();
  bool flag_v() const;
  void set_flag_v(bool value);
  private:
  bool _internal_flag_v() const;
  void _internal_set_flag_v(bool value);
  public:

  // optional uint32 acknowledged_message_counter = 50;
  bool has_acknowledged_message_counter() const;
  private:
  bool _internal_has_acknowledged_message_counter() const;
  public:
  void clear_acknowledged_message_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 acknowledged_message_counter() const;
  void set_acknowledged_message_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_acknowledged_message_counter() const;
  void _internal_set_acknowledged_message_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 protocol_opcode = 10;
  bool has_protocol_opcode() const;
  private:
  bool _internal_has_protocol_opcode() const;
  public:
  void clear_protocol_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_opcode() const;
  void set_protocol_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_opcode() const;
  void _internal_set_protocol_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 exchange_id = 20;
  bool has_exchange_id() const;
  private:
  bool _internal_has_exchange_id() const;
  public:
  void clear_exchange_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 exchange_id() const;
  void set_exchange_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exchange_id() const;
  void _internal_set_exchange_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .chip_message.ChipMessage.Payload.ProtocolID protocol_id = 30;
  bool has_protocol_id() const;
  private:
  bool _internal_has_protocol_id() const;
  public:
  void clear_protocol_id();
  ::chip_message::ChipMessage_Payload_ProtocolID protocol_id() const;
  void set_protocol_id(::chip_message::ChipMessage_Payload_ProtocolID value);
  private:
  ::chip_message::ChipMessage_Payload_ProtocolID _internal_protocol_id() const;
  void _internal_set_protocol_id(::chip_message::ChipMessage_Payload_ProtocolID value);
  public:

  // optional uint32 vendor_id = 40;
  bool has_vendor_id() const;
  private:
  bool _internal_has_vendor_id() const;
  public:
  void clear_vendor_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id() const;
  void set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vendor_id() const;
  void _internal_set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:chip_message.ChipMessage.Payload)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secured_extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_payload_;
  bool flag_i_;
  bool flag_a_;
  bool flag_r_;
  bool flag_sx_;
  bool flag_v_;
  ::PROTOBUF_NAMESPACE_ID::uint32 acknowledged_message_counter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_opcode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 exchange_id_;
  int protocol_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vendor_id_;
  friend struct ::TableStruct_chip_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ChipMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chip_message.ChipMessage) */ {
 public:
  inline ChipMessage() : ChipMessage(nullptr) {}
  ~ChipMessage() override;
  explicit constexpr ChipMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChipMessage(const ChipMessage& from);
  ChipMessage(ChipMessage&& from) noexcept
    : ChipMessage() {
    *this = ::std::move(from);
  }

  inline ChipMessage& operator=(const ChipMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChipMessage& operator=(ChipMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChipMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChipMessage* internal_default_instance() {
    return reinterpret_cast<const ChipMessage*>(
               &_ChipMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChipMessage& a, ChipMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChipMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChipMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChipMessage* New() const final {
    return new ChipMessage();
  }

  ChipMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChipMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChipMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChipMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChipMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chip_message.ChipMessage";
  }
  protected:
  explicit ChipMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChipMessage_Payload Payload;

  typedef ChipMessage_DSIZ DSIZ;
  static constexpr DSIZ DSIZ_NOT_PRESENT =
    ChipMessage_DSIZ_DSIZ_NOT_PRESENT;
  static constexpr DSIZ DSIZ_PRESENT_64 =
    ChipMessage_DSIZ_DSIZ_PRESENT_64;
  static constexpr DSIZ DSIZ_PRESENT_16 =
    ChipMessage_DSIZ_DSIZ_PRESENT_16;
  static inline bool DSIZ_IsValid(int value) {
    return ChipMessage_DSIZ_IsValid(value);
  }
  static constexpr DSIZ DSIZ_MIN =
    ChipMessage_DSIZ_DSIZ_MIN;
  static constexpr DSIZ DSIZ_MAX =
    ChipMessage_DSIZ_DSIZ_MAX;
  static constexpr int DSIZ_ARRAYSIZE =
    ChipMessage_DSIZ_DSIZ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DSIZ_descriptor() {
    return ChipMessage_DSIZ_descriptor();
  }
  template<typename T>
  static inline const std::string& DSIZ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DSIZ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DSIZ_Name.");
    return ChipMessage_DSIZ_Name(enum_t_value);
  }
  static inline bool DSIZ_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DSIZ* value) {
    return ChipMessage_DSIZ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageExtensionsFieldNumber = 60,
    kFooterFieldNumber = 80,
    kPayloadFieldNumber = 70,
    kFlagSFieldNumber = 2,
    kFlagDsizFieldNumber = 3,
    kMessageCounterFieldNumber = 30,
    kFlagVersionFieldNumber = 1,
    kSecurityFlagPFieldNumber = 20,
    kSecurityFlagCFieldNumber = 21,
    kSecurityFlagMxFieldNumber = 22,
    kSecurityFlagSessionTypeFieldNumber = 23,
    kSourceNodeIdFieldNumber = 40,
    kDestinationNodeIdFieldNumber = 50,
    kSessionIdFieldNumber = 10,
  };
  // optional bytes message_extensions = 60;
  bool has_message_extensions() const;
  private:
  bool _internal_has_message_extensions() const;
  public:
  void clear_message_extensions();
  const std::string& message_extensions() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_extensions(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_extensions();
  PROTOBUF_MUST_USE_RESULT std::string* release_message_extensions();
  void set_allocated_message_extensions(std::string* message_extensions);
  private:
  const std::string& _internal_message_extensions() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_extensions(const std::string& value);
  std::string* _internal_mutable_message_extensions();
  public:

  // required bytes footer = 80;
  bool has_footer() const;
  private:
  bool _internal_has_footer() const;
  public:
  void clear_footer();
  const std::string& footer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_footer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_footer();
  PROTOBUF_MUST_USE_RESULT std::string* release_footer();
  void set_allocated_footer(std::string* footer);
  private:
  const std::string& _internal_footer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_footer(const std::string& value);
  std::string* _internal_mutable_footer();
  public:

  // required .chip_message.ChipMessage.Payload payload = 70;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::chip_message::ChipMessage_Payload& payload() const;
  PROTOBUF_MUST_USE_RESULT ::chip_message::ChipMessage_Payload* release_payload();
  ::chip_message::ChipMessage_Payload* mutable_payload();
  void set_allocated_payload(::chip_message::ChipMessage_Payload* payload);
  private:
  const ::chip_message::ChipMessage_Payload& _internal_payload() const;
  ::chip_message::ChipMessage_Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::chip_message::ChipMessage_Payload* payload);
  ::chip_message::ChipMessage_Payload* unsafe_arena_release_payload();

  // required int32 flag_s = 2;
  bool has_flag_s() const;
  private:
  bool _internal_has_flag_s() const;
  public:
  void clear_flag_s();
  ::PROTOBUF_NAMESPACE_ID::int32 flag_s() const;
  void set_flag_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag_s() const;
  void _internal_set_flag_s(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .chip_message.ChipMessage.DSIZ flag_dsiz = 3;
  bool has_flag_dsiz() const;
  private:
  bool _internal_has_flag_dsiz() const;
  public:
  void clear_flag_dsiz();
  ::chip_message::ChipMessage_DSIZ flag_dsiz() const;
  void set_flag_dsiz(::chip_message::ChipMessage_DSIZ value);
  private:
  ::chip_message::ChipMessage_DSIZ _internal_flag_dsiz() const;
  void _internal_set_flag_dsiz(::chip_message::ChipMessage_DSIZ value);
  public:

  // required int32 message_counter = 30;
  bool has_message_counter() const;
  private:
  bool _internal_has_message_counter() const;
  public:
  void clear_message_counter();
  ::PROTOBUF_NAMESPACE_ID::int32 message_counter() const;
  void set_message_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_message_counter() const;
  void _internal_set_message_counter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool flag_version = 1;
  bool has_flag_version() const;
  private:
  bool _internal_has_flag_version() const;
  public:
  void clear_flag_version();
  bool flag_version() const;
  void set_flag_version(bool value);
  private:
  bool _internal_flag_version() const;
  void _internal_set_flag_version(bool value);
  public:

  // required bool security_flag_p = 20;
  bool has_security_flag_p() const;
  private:
  bool _internal_has_security_flag_p() const;
  public:
  void clear_security_flag_p();
  bool security_flag_p() const;
  void set_security_flag_p(bool value);
  private:
  bool _internal_security_flag_p() const;
  void _internal_set_security_flag_p(bool value);
  public:

  // required bool security_flag_c = 21;
  bool has_security_flag_c() const;
  private:
  bool _internal_has_security_flag_c() const;
  public:
  void clear_security_flag_c();
  bool security_flag_c() const;
  void set_security_flag_c(bool value);
  private:
  bool _internal_security_flag_c() const;
  void _internal_set_security_flag_c(bool value);
  public:

  // required bool security_flag_mx = 22;
  bool has_security_flag_mx() const;
  private:
  bool _internal_has_security_flag_mx() const;
  public:
  void clear_security_flag_mx();
  bool security_flag_mx() const;
  void set_security_flag_mx(bool value);
  private:
  bool _internal_security_flag_mx() const;
  void _internal_set_security_flag_mx(bool value);
  public:

  // required bool security_flag_session_type = 23;
  bool has_security_flag_session_type() const;
  private:
  bool _internal_has_security_flag_session_type() const;
  public:
  void clear_security_flag_session_type();
  bool security_flag_session_type() const;
  void set_security_flag_session_type(bool value);
  private:
  bool _internal_security_flag_session_type() const;
  void _internal_set_security_flag_session_type(bool value);
  public:

  // optional int64 source_node_id = 40;
  bool has_source_node_id() const;
  private:
  bool _internal_has_source_node_id() const;
  public:
  void clear_source_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 source_node_id() const;
  void set_source_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_source_node_id() const;
  void _internal_set_source_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 destination_node_id = 50;
  bool has_destination_node_id() const;
  private:
  bool _internal_has_destination_node_id() const;
  public:
  void clear_destination_node_id();
  ::PROTOBUF_NAMESPACE_ID::int64 destination_node_id() const;
  void set_destination_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_destination_node_id() const;
  void _internal_set_destination_node_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required int32 session_id = 10 [default = 1];
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  ::PROTOBUF_NAMESPACE_ID::int32 session_id() const;
  void set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_id() const;
  void _internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chip_message.ChipMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr footer_;
  ::chip_message::ChipMessage_Payload* payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_s_;
  int flag_dsiz_;
  ::PROTOBUF_NAMESPACE_ID::int32 message_counter_;
  bool flag_version_;
  bool security_flag_p_;
  bool security_flag_c_;
  bool security_flag_mx_;
  bool security_flag_session_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 source_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 destination_node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_id_;
  friend struct ::TableStruct_chip_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChipMessage_Payload

// required bool flag_i = 1;
inline bool ChipMessage_Payload::_internal_has_flag_i() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_flag_i() const {
  return _internal_has_flag_i();
}
inline void ChipMessage_Payload::clear_flag_i() {
  flag_i_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChipMessage_Payload::_internal_flag_i() const {
  return flag_i_;
}
inline bool ChipMessage_Payload::flag_i() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.flag_i)
  return _internal_flag_i();
}
inline void ChipMessage_Payload::_internal_set_flag_i(bool value) {
  _has_bits_[0] |= 0x00000004u;
  flag_i_ = value;
}
inline void ChipMessage_Payload::set_flag_i(bool value) {
  _internal_set_flag_i(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.flag_i)
}

// required bool flag_a = 2;
inline bool ChipMessage_Payload::_internal_has_flag_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_flag_a() const {
  return _internal_has_flag_a();
}
inline void ChipMessage_Payload::clear_flag_a() {
  flag_a_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChipMessage_Payload::_internal_flag_a() const {
  return flag_a_;
}
inline bool ChipMessage_Payload::flag_a() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.flag_a)
  return _internal_flag_a();
}
inline void ChipMessage_Payload::_internal_set_flag_a(bool value) {
  _has_bits_[0] |= 0x00000008u;
  flag_a_ = value;
}
inline void ChipMessage_Payload::set_flag_a(bool value) {
  _internal_set_flag_a(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.flag_a)
}

// required bool flag_r = 3;
inline bool ChipMessage_Payload::_internal_has_flag_r() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_flag_r() const {
  return _internal_has_flag_r();
}
inline void ChipMessage_Payload::clear_flag_r() {
  flag_r_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChipMessage_Payload::_internal_flag_r() const {
  return flag_r_;
}
inline bool ChipMessage_Payload::flag_r() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.flag_r)
  return _internal_flag_r();
}
inline void ChipMessage_Payload::_internal_set_flag_r(bool value) {
  _has_bits_[0] |= 0x00000010u;
  flag_r_ = value;
}
inline void ChipMessage_Payload::set_flag_r(bool value) {
  _internal_set_flag_r(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.flag_r)
}

// required bool flag_sx = 4;
inline bool ChipMessage_Payload::_internal_has_flag_sx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_flag_sx() const {
  return _internal_has_flag_sx();
}
inline void ChipMessage_Payload::clear_flag_sx() {
  flag_sx_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ChipMessage_Payload::_internal_flag_sx() const {
  return flag_sx_;
}
inline bool ChipMessage_Payload::flag_sx() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.flag_sx)
  return _internal_flag_sx();
}
inline void ChipMessage_Payload::_internal_set_flag_sx(bool value) {
  _has_bits_[0] |= 0x00000020u;
  flag_sx_ = value;
}
inline void ChipMessage_Payload::set_flag_sx(bool value) {
  _internal_set_flag_sx(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.flag_sx)
}

// required bool flag_v = 5;
inline bool ChipMessage_Payload::_internal_has_flag_v() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_flag_v() const {
  return _internal_has_flag_v();
}
inline void ChipMessage_Payload::clear_flag_v() {
  flag_v_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ChipMessage_Payload::_internal_flag_v() const {
  return flag_v_;
}
inline bool ChipMessage_Payload::flag_v() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.flag_v)
  return _internal_flag_v();
}
inline void ChipMessage_Payload::_internal_set_flag_v(bool value) {
  _has_bits_[0] |= 0x00000040u;
  flag_v_ = value;
}
inline void ChipMessage_Payload::set_flag_v(bool value) {
  _internal_set_flag_v(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.flag_v)
}

// required uint32 protocol_opcode = 10;
inline bool ChipMessage_Payload::_internal_has_protocol_opcode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_protocol_opcode() const {
  return _internal_has_protocol_opcode();
}
inline void ChipMessage_Payload::clear_protocol_opcode() {
  protocol_opcode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::_internal_protocol_opcode() const {
  return protocol_opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::protocol_opcode() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.protocol_opcode)
  return _internal_protocol_opcode();
}
inline void ChipMessage_Payload::_internal_set_protocol_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  protocol_opcode_ = value;
}
inline void ChipMessage_Payload::set_protocol_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_opcode(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.protocol_opcode)
}

// required uint32 exchange_id = 20;
inline bool ChipMessage_Payload::_internal_has_exchange_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_exchange_id() const {
  return _internal_has_exchange_id();
}
inline void ChipMessage_Payload::clear_exchange_id() {
  exchange_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::_internal_exchange_id() const {
  return exchange_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::exchange_id() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.exchange_id)
  return _internal_exchange_id();
}
inline void ChipMessage_Payload::_internal_set_exchange_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  exchange_id_ = value;
}
inline void ChipMessage_Payload::set_exchange_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.exchange_id)
}

// required .chip_message.ChipMessage.Payload.ProtocolID protocol_id = 30;
inline bool ChipMessage_Payload::_internal_has_protocol_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_protocol_id() const {
  return _internal_has_protocol_id();
}
inline void ChipMessage_Payload::clear_protocol_id() {
  protocol_id_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::chip_message::ChipMessage_Payload_ProtocolID ChipMessage_Payload::_internal_protocol_id() const {
  return static_cast< ::chip_message::ChipMessage_Payload_ProtocolID >(protocol_id_);
}
inline ::chip_message::ChipMessage_Payload_ProtocolID ChipMessage_Payload::protocol_id() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.protocol_id)
  return _internal_protocol_id();
}
inline void ChipMessage_Payload::_internal_set_protocol_id(::chip_message::ChipMessage_Payload_ProtocolID value) {
  assert(::chip_message::ChipMessage_Payload_ProtocolID_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  protocol_id_ = value;
}
inline void ChipMessage_Payload::set_protocol_id(::chip_message::ChipMessage_Payload_ProtocolID value) {
  _internal_set_protocol_id(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.protocol_id)
}

// optional uint32 vendor_id = 40;
inline bool ChipMessage_Payload::_internal_has_vendor_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_vendor_id() const {
  return _internal_has_vendor_id();
}
inline void ChipMessage_Payload::clear_vendor_id() {
  vendor_id_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::_internal_vendor_id() const {
  return vendor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::vendor_id() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.vendor_id)
  return _internal_vendor_id();
}
inline void ChipMessage_Payload::_internal_set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  vendor_id_ = value;
}
inline void ChipMessage_Payload::set_vendor_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.vendor_id)
}

// optional uint32 acknowledged_message_counter = 50;
inline bool ChipMessage_Payload::_internal_has_acknowledged_message_counter() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_acknowledged_message_counter() const {
  return _internal_has_acknowledged_message_counter();
}
inline void ChipMessage_Payload::clear_acknowledged_message_counter() {
  acknowledged_message_counter_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::_internal_acknowledged_message_counter() const {
  return acknowledged_message_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChipMessage_Payload::acknowledged_message_counter() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.acknowledged_message_counter)
  return _internal_acknowledged_message_counter();
}
inline void ChipMessage_Payload::_internal_set_acknowledged_message_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  acknowledged_message_counter_ = value;
}
inline void ChipMessage_Payload::set_acknowledged_message_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_acknowledged_message_counter(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.acknowledged_message_counter)
}

// optional bytes secured_extensions = 60;
inline bool ChipMessage_Payload::_internal_has_secured_extensions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_secured_extensions() const {
  return _internal_has_secured_extensions();
}
inline void ChipMessage_Payload::clear_secured_extensions() {
  secured_extensions_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChipMessage_Payload::secured_extensions() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.secured_extensions)
  return _internal_secured_extensions();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChipMessage_Payload::set_secured_extensions(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 secured_extensions_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.secured_extensions)
}
inline std::string* ChipMessage_Payload::mutable_secured_extensions() {
  std::string* _s = _internal_mutable_secured_extensions();
  // @@protoc_insertion_point(field_mutable:chip_message.ChipMessage.Payload.secured_extensions)
  return _s;
}
inline const std::string& ChipMessage_Payload::_internal_secured_extensions() const {
  return secured_extensions_.Get();
}
inline void ChipMessage_Payload::_internal_set_secured_extensions(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  secured_extensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChipMessage_Payload::_internal_mutable_secured_extensions() {
  _has_bits_[0] |= 0x00000001u;
  return secured_extensions_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChipMessage_Payload::release_secured_extensions() {
  // @@protoc_insertion_point(field_release:chip_message.ChipMessage.Payload.secured_extensions)
  if (!_internal_has_secured_extensions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return secured_extensions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChipMessage_Payload::set_allocated_secured_extensions(std::string* secured_extensions) {
  if (secured_extensions != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  secured_extensions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secured_extensions,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chip_message.ChipMessage.Payload.secured_extensions)
}

// required bytes application_payload = 70;
inline bool ChipMessage_Payload::_internal_has_application_payload() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChipMessage_Payload::has_application_payload() const {
  return _internal_has_application_payload();
}
inline void ChipMessage_Payload::clear_application_payload() {
  application_payload_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChipMessage_Payload::application_payload() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.Payload.application_payload)
  return _internal_application_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChipMessage_Payload::set_application_payload(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 application_payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.Payload.application_payload)
}
inline std::string* ChipMessage_Payload::mutable_application_payload() {
  std::string* _s = _internal_mutable_application_payload();
  // @@protoc_insertion_point(field_mutable:chip_message.ChipMessage.Payload.application_payload)
  return _s;
}
inline const std::string& ChipMessage_Payload::_internal_application_payload() const {
  return application_payload_.Get();
}
inline void ChipMessage_Payload::_internal_set_application_payload(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  application_payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChipMessage_Payload::_internal_mutable_application_payload() {
  _has_bits_[0] |= 0x00000002u;
  return application_payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChipMessage_Payload::release_application_payload() {
  // @@protoc_insertion_point(field_release:chip_message.ChipMessage.Payload.application_payload)
  if (!_internal_has_application_payload()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return application_payload_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChipMessage_Payload::set_allocated_application_payload(std::string* application_payload) {
  if (application_payload != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  application_payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chip_message.ChipMessage.Payload.application_payload)
}

// -------------------------------------------------------------------

// ChipMessage

// required bool flag_version = 1;
inline bool ChipMessage::_internal_has_flag_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChipMessage::has_flag_version() const {
  return _internal_has_flag_version();
}
inline void ChipMessage::clear_flag_version() {
  flag_version_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ChipMessage::_internal_flag_version() const {
  return flag_version_;
}
inline bool ChipMessage::flag_version() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.flag_version)
  return _internal_flag_version();
}
inline void ChipMessage::_internal_set_flag_version(bool value) {
  _has_bits_[0] |= 0x00000040u;
  flag_version_ = value;
}
inline void ChipMessage::set_flag_version(bool value) {
  _internal_set_flag_version(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.flag_version)
}

// required int32 flag_s = 2;
inline bool ChipMessage::_internal_has_flag_s() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChipMessage::has_flag_s() const {
  return _internal_has_flag_s();
}
inline void ChipMessage::clear_flag_s() {
  flag_s_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChipMessage::_internal_flag_s() const {
  return flag_s_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChipMessage::flag_s() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.flag_s)
  return _internal_flag_s();
}
inline void ChipMessage::_internal_set_flag_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  flag_s_ = value;
}
inline void ChipMessage::set_flag_s(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag_s(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.flag_s)
}

// required .chip_message.ChipMessage.DSIZ flag_dsiz = 3;
inline bool ChipMessage::_internal_has_flag_dsiz() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChipMessage::has_flag_dsiz() const {
  return _internal_has_flag_dsiz();
}
inline void ChipMessage::clear_flag_dsiz() {
  flag_dsiz_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::chip_message::ChipMessage_DSIZ ChipMessage::_internal_flag_dsiz() const {
  return static_cast< ::chip_message::ChipMessage_DSIZ >(flag_dsiz_);
}
inline ::chip_message::ChipMessage_DSIZ ChipMessage::flag_dsiz() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.flag_dsiz)
  return _internal_flag_dsiz();
}
inline void ChipMessage::_internal_set_flag_dsiz(::chip_message::ChipMessage_DSIZ value) {
  assert(::chip_message::ChipMessage_DSIZ_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  flag_dsiz_ = value;
}
inline void ChipMessage::set_flag_dsiz(::chip_message::ChipMessage_DSIZ value) {
  _internal_set_flag_dsiz(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.flag_dsiz)
}

// required int32 session_id = 10 [default = 1];
inline bool ChipMessage::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChipMessage::has_session_id() const {
  return _internal_has_session_id();
}
inline void ChipMessage::clear_session_id() {
  session_id_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChipMessage::_internal_session_id() const {
  return session_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChipMessage::session_id() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.session_id)
  return _internal_session_id();
}
inline void ChipMessage::_internal_set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  session_id_ = value;
}
inline void ChipMessage::set_session_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.session_id)
}

// required bool security_flag_p = 20;
inline bool ChipMessage::_internal_has_security_flag_p() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChipMessage::has_security_flag_p() const {
  return _internal_has_security_flag_p();
}
inline void ChipMessage::clear_security_flag_p() {
  security_flag_p_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool ChipMessage::_internal_security_flag_p() const {
  return security_flag_p_;
}
inline bool ChipMessage::security_flag_p() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.security_flag_p)
  return _internal_security_flag_p();
}
inline void ChipMessage::_internal_set_security_flag_p(bool value) {
  _has_bits_[0] |= 0x00000080u;
  security_flag_p_ = value;
}
inline void ChipMessage::set_security_flag_p(bool value) {
  _internal_set_security_flag_p(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.security_flag_p)
}

// required bool security_flag_c = 21;
inline bool ChipMessage::_internal_has_security_flag_c() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ChipMessage::has_security_flag_c() const {
  return _internal_has_security_flag_c();
}
inline void ChipMessage::clear_security_flag_c() {
  security_flag_c_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool ChipMessage::_internal_security_flag_c() const {
  return security_flag_c_;
}
inline bool ChipMessage::security_flag_c() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.security_flag_c)
  return _internal_security_flag_c();
}
inline void ChipMessage::_internal_set_security_flag_c(bool value) {
  _has_bits_[0] |= 0x00000100u;
  security_flag_c_ = value;
}
inline void ChipMessage::set_security_flag_c(bool value) {
  _internal_set_security_flag_c(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.security_flag_c)
}

// required bool security_flag_mx = 22;
inline bool ChipMessage::_internal_has_security_flag_mx() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ChipMessage::has_security_flag_mx() const {
  return _internal_has_security_flag_mx();
}
inline void ChipMessage::clear_security_flag_mx() {
  security_flag_mx_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ChipMessage::_internal_security_flag_mx() const {
  return security_flag_mx_;
}
inline bool ChipMessage::security_flag_mx() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.security_flag_mx)
  return _internal_security_flag_mx();
}
inline void ChipMessage::_internal_set_security_flag_mx(bool value) {
  _has_bits_[0] |= 0x00000200u;
  security_flag_mx_ = value;
}
inline void ChipMessage::set_security_flag_mx(bool value) {
  _internal_set_security_flag_mx(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.security_flag_mx)
}

// required bool security_flag_session_type = 23;
inline bool ChipMessage::_internal_has_security_flag_session_type() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ChipMessage::has_security_flag_session_type() const {
  return _internal_has_security_flag_session_type();
}
inline void ChipMessage::clear_security_flag_session_type() {
  security_flag_session_type_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ChipMessage::_internal_security_flag_session_type() const {
  return security_flag_session_type_;
}
inline bool ChipMessage::security_flag_session_type() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.security_flag_session_type)
  return _internal_security_flag_session_type();
}
inline void ChipMessage::_internal_set_security_flag_session_type(bool value) {
  _has_bits_[0] |= 0x00000400u;
  security_flag_session_type_ = value;
}
inline void ChipMessage::set_security_flag_session_type(bool value) {
  _internal_set_security_flag_session_type(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.security_flag_session_type)
}

// required int32 message_counter = 30;
inline bool ChipMessage::_internal_has_message_counter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChipMessage::has_message_counter() const {
  return _internal_has_message_counter();
}
inline void ChipMessage::clear_message_counter() {
  message_counter_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChipMessage::_internal_message_counter() const {
  return message_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChipMessage::message_counter() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.message_counter)
  return _internal_message_counter();
}
inline void ChipMessage::_internal_set_message_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  message_counter_ = value;
}
inline void ChipMessage::set_message_counter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_message_counter(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.message_counter)
}

// optional int64 source_node_id = 40;
inline bool ChipMessage::_internal_has_source_node_id() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChipMessage::has_source_node_id() const {
  return _internal_has_source_node_id();
}
inline void ChipMessage::clear_source_node_id() {
  source_node_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChipMessage::_internal_source_node_id() const {
  return source_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChipMessage::source_node_id() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.source_node_id)
  return _internal_source_node_id();
}
inline void ChipMessage::_internal_set_source_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  source_node_id_ = value;
}
inline void ChipMessage::set_source_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_source_node_id(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.source_node_id)
}

// optional int64 destination_node_id = 50;
inline bool ChipMessage::_internal_has_destination_node_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChipMessage::has_destination_node_id() const {
  return _internal_has_destination_node_id();
}
inline void ChipMessage::clear_destination_node_id() {
  destination_node_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChipMessage::_internal_destination_node_id() const {
  return destination_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChipMessage::destination_node_id() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.destination_node_id)
  return _internal_destination_node_id();
}
inline void ChipMessage::_internal_set_destination_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  destination_node_id_ = value;
}
inline void ChipMessage::set_destination_node_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_destination_node_id(value);
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.destination_node_id)
}

// optional bytes message_extensions = 60;
inline bool ChipMessage::_internal_has_message_extensions() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChipMessage::has_message_extensions() const {
  return _internal_has_message_extensions();
}
inline void ChipMessage::clear_message_extensions() {
  message_extensions_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChipMessage::message_extensions() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.message_extensions)
  return _internal_message_extensions();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChipMessage::set_message_extensions(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 message_extensions_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.message_extensions)
}
inline std::string* ChipMessage::mutable_message_extensions() {
  std::string* _s = _internal_mutable_message_extensions();
  // @@protoc_insertion_point(field_mutable:chip_message.ChipMessage.message_extensions)
  return _s;
}
inline const std::string& ChipMessage::_internal_message_extensions() const {
  return message_extensions_.Get();
}
inline void ChipMessage::_internal_set_message_extensions(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_extensions_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChipMessage::_internal_mutable_message_extensions() {
  _has_bits_[0] |= 0x00000001u;
  return message_extensions_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChipMessage::release_message_extensions() {
  // @@protoc_insertion_point(field_release:chip_message.ChipMessage.message_extensions)
  if (!_internal_has_message_extensions()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_extensions_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChipMessage::set_allocated_message_extensions(std::string* message_extensions) {
  if (message_extensions != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_extensions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_extensions,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chip_message.ChipMessage.message_extensions)
}

// required .chip_message.ChipMessage.Payload payload = 70;
inline bool ChipMessage::_internal_has_payload() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || payload_ != nullptr);
  return value;
}
inline bool ChipMessage::has_payload() const {
  return _internal_has_payload();
}
inline void ChipMessage::clear_payload() {
  if (payload_ != nullptr) payload_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::chip_message::ChipMessage_Payload& ChipMessage::_internal_payload() const {
  const ::chip_message::ChipMessage_Payload* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::chip_message::ChipMessage_Payload&>(
      ::chip_message::_ChipMessage_Payload_default_instance_);
}
inline const ::chip_message::ChipMessage_Payload& ChipMessage::payload() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.payload)
  return _internal_payload();
}
inline void ChipMessage::unsafe_arena_set_allocated_payload(
    ::chip_message::ChipMessage_Payload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chip_message.ChipMessage.payload)
}
inline ::chip_message::ChipMessage_Payload* ChipMessage::release_payload() {
  _has_bits_[0] &= ~0x00000004u;
  ::chip_message::ChipMessage_Payload* temp = payload_;
  payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chip_message::ChipMessage_Payload* ChipMessage::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:chip_message.ChipMessage.payload)
  _has_bits_[0] &= ~0x00000004u;
  ::chip_message::ChipMessage_Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::chip_message::ChipMessage_Payload* ChipMessage::_internal_mutable_payload() {
  _has_bits_[0] |= 0x00000004u;
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::chip_message::ChipMessage_Payload>(GetArenaForAllocation());
    payload_ = p;
  }
  return payload_;
}
inline ::chip_message::ChipMessage_Payload* ChipMessage::mutable_payload() {
  ::chip_message::ChipMessage_Payload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:chip_message.ChipMessage.payload)
  return _msg;
}
inline void ChipMessage::set_allocated_payload(::chip_message::ChipMessage_Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::chip_message::ChipMessage_Payload>::GetOwningArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:chip_message.ChipMessage.payload)
}

// required bytes footer = 80;
inline bool ChipMessage::_internal_has_footer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChipMessage::has_footer() const {
  return _internal_has_footer();
}
inline void ChipMessage::clear_footer() {
  footer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChipMessage::footer() const {
  // @@protoc_insertion_point(field_get:chip_message.ChipMessage.footer)
  return _internal_footer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChipMessage::set_footer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 footer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chip_message.ChipMessage.footer)
}
inline std::string* ChipMessage::mutable_footer() {
  std::string* _s = _internal_mutable_footer();
  // @@protoc_insertion_point(field_mutable:chip_message.ChipMessage.footer)
  return _s;
}
inline const std::string& ChipMessage::_internal_footer() const {
  return footer_.Get();
}
inline void ChipMessage::_internal_set_footer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  footer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChipMessage::_internal_mutable_footer() {
  _has_bits_[0] |= 0x00000002u;
  return footer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChipMessage::release_footer() {
  // @@protoc_insertion_point(field_release:chip_message.ChipMessage.footer)
  if (!_internal_has_footer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return footer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChipMessage::set_allocated_footer(std::string* footer) {
  if (footer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  footer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), footer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:chip_message.ChipMessage.footer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chip_message

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chip_message::ChipMessage_Payload_ProtocolID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chip_message::ChipMessage_Payload_ProtocolID>() {
  return ::chip_message::ChipMessage_Payload_ProtocolID_descriptor();
}
template <> struct is_proto_enum< ::chip_message::ChipMessage_DSIZ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chip_message::ChipMessage_DSIZ>() {
  return ::chip_message::ChipMessage_DSIZ_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chip_5fmessage_2eproto
