syntax = "proto2";
package chip_message;

message ChipMessage {

  /*
  4.4.1.1. Message Length (16 bits)
  An optional, unsigned integer value specifying the overall length of the message in bytes, not
  including the size of the Message Length field itself. This field SHALL only be present when the
  message is being transmitted over a stream-oriented channel such as TCP. When transmitted over a
  message-oriented channel, the message length is conveyed by the underlying channel. For example,
  when transmitted over UDP, the message length is equal to the payload length of the UDP packet.
  */


  /*
  4.4.1.2. Message Flags (8 bits)
  An unsigned integer bit field containing the following subfields:
  */

  /*
  Version (4 bits, positions 4-7)
  An unsigned integer specifying the version of the Matter Message format used to encode the mes
  sage. Currently only one version is defined
  */
  // SET TO 0 / 1
  required bool flag_version = 01;

  /*
  S Flag (1 bit, position 2)
  A single bit field which SHALL be set if and only if the Source Node ID field is present
  */
  required bool flag_s = 02;

  /*
  DSIZ Field (2 bits, position 0-1)
  This field SHALL indicate the size and meaning of the Destination Node ID field.
  • 0 — Destination Node ID field is not present
  • 1 — Destination Node ID field is present as a 64-bit Node ID
  • 2 — Destination Node ID field is present as a 16-bit Group ID
  • 3 — Reserved for future use
  */
  enum DSIZ {
    DSIZ_NOT_PRESENT = 0;
    DSIZ_PRESENT_64 = 1;
    DSIZ_PRESENT_16 = 2;
  }
  required DSIZ flag_dsiz = 03;

  /*
  4.4.1.3. Session ID (16 bits)
  An unsigned integer value identifying the session associated with this message. The session identi
  fies the particular key used to encrypt a message out of the set of available keys (either session or
  group), and the particular encryption/message integrity algorithm to use for the message. The Ses
  sion ID field is always present. For details on derivation of this field, see respective sections on uni
  cast and group session ID derivation.
  */
  required int32 session_id = 10 [default = 1];

  /*
  P Flag (1 bit, position 7)
  The Privacy (P) flag is a single bit field which, when set, SHALL identify that the message is encoded
  with privacy enhancements as specified in Section 4.8.3, “Privacy Processing of Outgoing Messages”
  */
  required bool security_flag_p = 20;

  /*
  C Flag (1 bit, position 6)
  The Control message (C) flag is a single bit field which, when set, SHALL identify that the message is
  a control message, such as for the Message Counter Synchronization Protocol, and uses the control
  message counter for the nonce field as specified in Section 4.7.1.1, “Nonce”.
  */
  required bool security_flag_c = 21;

  /*
  MX Flag (1 bit, position 5)
  The Message Extensions (MX) flag is a single bit field which, when set, SHALL indicate that the Mes
  sage Extensions portion of the message is present and has non-zero length. Version 1.0 Nodes
  SHALL set this flag to zero.
  */
  required bool security_flag_mx = 22; // set to false?

  /*
  Session Type (2 bit, position 0-1)
  An unsigned integer specifying the type of session associated with the message.
  */
  required bool security_flag_session_type = 23;

  /*
  4.4.1.5. Message Counter (32 bits)
  An unsigned integer value uniquely identifying the message from the perspective of the sending
  node. The message counter is generated based on the Session Type and increases monotonically for
  each unique message generated. When messages are retransmitted, using the reliable messaging
  capabilities, the counter remains the same, as logical retransmission is of a given message as identi
  fied by its message counter. Similarly, acknowledgements refer to values of the message counter
  being acknowledged.
  */
  required int32 message_counter = 30;

  /*
  4.4.1.6. Source Node ID (64 bits)
  An optional sequence of 8 bytes containing the unique identifier of the source node. The Source
  Node ID field SHALL only be present in a message when the S Flag in the Message Flags field is set
  to 1.
  */
  optional int64 source_node_id = 40;

  /*
  4.4.1.7. Destination Node ID
  The optional Destination Node ID field contains the unique Node Identifier of the destination Node
  or group to which the message is being sent. The size and encoding of the Destination Node ID field
  depends on the value of the DSIZ field.
  */
  optional int64 destination_node_id = 50;

  /*
  4.4.1.8. Message Extensions (variable)
  The Message Extensions field is a variable length block of data for providing backwards compatible
  extensibility. The format of the Message Extensions block is shown in Table 11, “Message Extensions
  block format definition”. The Message Extensions block SHALL be present only if the MX Flag is set
  to 1 in the Security Flags field
  */
  optional bytes message_extensions = 60;

  message Payload {
    /*
    4.4.3. Protocol Header Field Description
    */

    /*
    4.4.3.1. Exchange Flags (8 bits)
    An unsigned integer bit field containing the following subfields:
    */

    /*
    I Flag (1 bit, position 0)
    The Initiator (I) flag is a single bit field which, when set, SHALL indicate that the message was sent
    by the initiator of the exchange
    */
    required bool flag_i = 01;

    /*
    A Flag (1 bit, position 1)
    The Acknowledgement (A) flag is a single bit field which, when set, SHALL indicate that the mes
    sage serves as an acknowledgement of a previous message received by the current message sender
    */
    required bool flag_a = 02;

    /*
    R Flag (1 bit, position 2)
    The Reliability (R) flag is a single bit field which, when set, SHALL indicate that the message sender
    wishes to receive an acknowledgement for the message.
    */
    required bool flag_r = 03;

    /*
    SX Flag (1 bit, position 3)
    The Secured Extensions (SX) flag is a single bit field which, when set, SHALL indicate that the
    Secured Extensions portion of the message is present and has non-zero length. Version 1.0 Nodes
    SHALL set this flag to zero
    */
    required bool flag_sx = 04; // set to false?

    /*
    V Flag (1 bit, position 4)
    The Vendor (V) protocol flag is a single bit field which, when set, SHALL indicate whether the Proto
    col Vendor ID is present
    */
    required bool flag_v = 05;

    /*
    4.4.3.2. Protocol Opcode (8 bits)
    An unsigned integer value identifying the type of the message. The Protocol Opcode is interpreted
    relative to the Matter protocol specified in the Protocol ID field.
    Opcodes are defined by the corresponding Protocol specification, for example Secure Channel Pro
    tocol.
    */
    required uint32 protocol_opcode = 10;

    /*
    4.4.3.3. Exchange ID (16 bits)
    An unsigned integer value identifying the exchange to which the message belongs. An Exchange ID
    Matter Specification R1.0 Connectivity Standards Alliance Document 22-27349 Sep. 28, 2022
    Page 112 Copyright © Connectivity Standards Alliance, Inc. All rights reserved.
    is allocated by the initiator of the exchange, and is unique within the initiator exchange number
    space as specified in Section 4.9.2, “Exchange ID”.
    */
    required uint32 exchange_id = 20;

    /*
    4.4.3.4. Protocol ID (16 bits)
    An unsigned integer value identifying the protocol in which the Protocol Opcode of the message is
    defined.
    */
    enum ProtocolID {
      PROTOCOL_ID_SECURE_CHANNEL = 0;
      PROTOCOL_ID_INTERACTION_MODEL = 1;
      PROTOCOL_ID_BDX = 2;
      PROTOCOL_ID_USER_DIRECTED_COMMISSIONING = 3;
      PROTOCOL_ID_FOR_TESTING = 4;
      PROTOCOL_ID_RESERVED = 5; // TODO - handle randomly
    }
    required ProtocolID protocol_id = 30;


    /*
    4.4.3.5. Protocol Vendor ID (16 bits)
    An optional, unsigned integer value that contains the Vendor ID namespacing for the Protocol ID
    field. This field SHALL only be present when the V Flag is set; otherwise the default is 0, corre
    sponding to the Matter Standard Vendor ID
    */
    optional uint32 vendor_id = 40;

    /*
    4.4.3.6. Acknowledged Message Counter (32 bits)
    An optional, unsigned integer value containing the message counter of a previous message that is
    being acknowledged by the current message. The Acknowledged Message Counter field is SHALL
    only be present when the A Flag in the Exchange Flags field is 1.
    */
    optional uint32 acknowledged_message_counter = 50;

    /*
    4.4.3.7. Secured Extensions (variable)
    The Secured Extensions field is a variable length block of data for providing backwards compatible
    extensibility. The format of the Secured Extensions block is shown in Table 14, “Secured Extensions
    block format definition”. The Secured Extensions block SHALL be present only if the SX Flag is set
    to 1 in the Exchange Flags field.
    Version 1.0 Nodes SHALL ignore the contents of the Secured Extensions payload.
    */
    optional bytes secured_extensions = 60;

    /*
    4.4.3.8. Application Payload (variable length)
    A sequence of zero or more bytes containing the application data conveyed by the message.
    */
    required bytes application_payload = 70;

  }
  required Payload payload = 70;

  required bytes footer = 80;
}
